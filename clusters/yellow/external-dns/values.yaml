external-dns:
  image:
    registry: docker.io
    repository: bitnami/external-dns
    tag: 0.5.17-debian-9-r25
    pullPolicy: IfNotPresent
  
  sources:
  - service
  - ingress
  # - crd
  
  provider: azure
  
  ## Whether to publish DNS records for ClusterIP services or not (optional)
  ##
  publishInternalServices: false
  
  ## Azure configuration to be set via arguments/env. variables
  ##
  azure:
    ## When a secret to load azure.json is not specified,
    ## the host's /etc/kubernetes/azure.json will be used
    ##
    ## Deprecated: please use tenantId, subscriptionId, aadClientId and aadClientSecret values instead.
    ##
    secretName: "azuredns"
    ## Azure resource group to use
    ##
    resourceGroup: "group-dns-matsiremarkcom"
  #   ## Azure tenant ID to use
  #   ##
  #   tenantId: ""
  #   ## Azure subscription ID to use
  #   ##
  #   subscriptionId: ""
  #   aadClientId: ""
  #   aadClientSecret: ""
  #   useManagedIdentityExtension: false
  
  
  ## Limit possible target zones by domain suffixes (optional)
  ##
  domainFilters: ["matsiremark.com"]
  ## Limit possible target zones by zone id (optional)
  ##
  #zoneIdFilters: []
  ## Filter sources managed by external-dns via annotation using label selector semantics (optional)
  ##
  annotationFilter: ""
  ## When enabled, prints DNS record changes rather than actually performing them
  ##
  dryRun: false
  ## Adjust the interval for DNS updates
  ##
  interval: "1m"
  ## Verbosity of the ExternalDNS logs. Available values are:
  ## - panic, debug, info, warn, error, fatal
  ##
  logLevel: info
  ## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only)
  ##
  policy: sync
  ## Registry Type. Available types are: txt, noop
  ## ref: https://github.com/kubernetes-incubator/external-dns/blob/master/docs/proposal/registry.md
  ##
  registry: "txt"
  ## TXT Registry Identifier
  ##
  txtOwnerId: "aks-runtime"
  ## Prefix to create a TXT record with a name following the pattern prefix.<CNAME record>
  ##
  # txtPrefix: ""
  ## Load balancer service to be used; ie: custom-istio-namespace/custom-istio-ingressgateway.
  ## Omit to use the default (istio-system/istio-ingressgateway)
  ##
  istioIngressGateways: []
  
  ## Extra Arguments to passed to external-dns
  ##
  extraArgs: {}
  ## Extra env. variable to set on external-dns container.
  ##
  ## extraEnv:
  ## - name: VARNAME1
  ##   value: value1
  ## - name: VARNAME2
  ##   valueFrom:
  ##     secretKeyRef:
  ##       name: existing-secret
  ##       key: varname2-key
  extraEnv: []
  
  ## Replica count
  ##
  replicas: 1
  
  ## Affinity for pod assignment (this value is evaluated as a template)
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## Node labels for pod assignment (this value is evaluated as a template)
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ##
  nodeSelector: {}
  ## Tolerations for pod assignment (this value is evaluated as a template)
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  ##
  tolerations: []
  ## Annotations for external-dns pods
  ##
  podAnnotations: {}
  ## Additional labels for the pod(s).
  ##
  podLabels: {}
  ## Pod priority class name
  ##
  priorityClassName: ""
  
  ## Options for the source type "crd"
  ##
  crd:
    ## Install and use the integrated DNSEndpoint CRD
    create: false
    ## Change these to use an external DNSEndpoint CRD (E.g. from kubefed)
    apiversion: ""
    kind: ""
  
  ## Kubernetes svc configutarion
  ##
  service:
    ## Kubernetes svc type
    ##
    type: ClusterIP
    port: 7979
    ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:
    ## Static clusterIP or None for headless services
    ##
    # clusterIP: ""
    ## External IP list to use with ClusterIP service type
    ##
    externalIPs: []
    ## Use loadBalancerIP to request a specific static IP,
    ## otherwise leave blank
    ##
    # loadBalancerIP:
    ## Address that are allowed when svc is LoadBalancer
    ##
    loadBalancerSourceRanges: []
    ## Provide any additional annotations which may be required. This can be used to
    ## set the LoadBalancer service type to internal only.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    annotations: {}
  
  ## RBAC parameteres
  ## https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  ##
  rbac:
    create: true
    ## Service Account for pods
    ## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    ##
    serviceAccountName: default
    ## Annotations for the Service Account
    ##
    serviceAccountAnnotations: {}
    ## RBAC API version
    ##
    apiVersion: v1beta1
    ## Podsecuritypolicy
    ##
    pspEnabled: false
  
  ## Kubernetes Security Context
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext: {}
    # allowPrivilegeEscalation: false
    # readOnlyRootFilesystem: true
    # capabilities:
    #   drop: ["ALL"]
  podSecurityContext:
    fsGroup: 1001
    runAsUser: 1001
    # runAsNonRoot: true
  
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
   limits:
     cpu: 50m
     memory: 50Mi
   requests:
     memory: 50Mi
     cpu: 10m
  
  ## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  ## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    httpGet:
      path: /healthz
      port: http
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  ## Prometheus Exporter / Metrics
  ##
  metrics:
    enabled: false
    ## Metrics exporter pod Annotation and Labels
    ##